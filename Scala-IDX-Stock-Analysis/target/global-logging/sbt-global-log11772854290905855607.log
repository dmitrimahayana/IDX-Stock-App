[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\dmitr\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\dmitr\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.1 (Amazon.com Inc. Java 11.0.19)
[debug]       Load.loadUnit: plugins took 170.8807ms
[debug]       Load.loadUnit: defsScala took 0.4685ms
[debug] [Loading] Scanning directory C:\Users\dmitr\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\dmitr\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 44.5142 ms
[debug]           Load.resolveProject(global-plugins) took 91.9069ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\dmitr\.sbt\1.0\plugins, plugins: List(<none>))) took 168.4705ms
[debug] [Loading] Done in C:\Users\dmitr\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 206.3223ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.313ms
[debug]     Load.loadUnit(file:/C:/Users/dmitr/.sbt/1.0/plugins/, ...) took 391.9472ms
[debug]   Load.apply: load took 799.4782ms
[debug]   Load.apply: resolveProjects took 21.5037ms
[debug]   Load.apply: finalTransforms took 200.9041ms
[debug]   Load.apply: config.delegates took 23.3166ms
[debug]   Load.apply: Def.make(settings)... took 930.4724ms
[debug]   Load.apply: structureIndex took 181.4206ms
[debug]   Load.apply: mkStreams took 2.3097ms
[info] loading global plugins from C:\Users\dmitr\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4887.6116ms
[debug]           Load.loadUnit: plugins took 42.1994ms
[debug]           Load.loadUnit: defsScala took 0.0033ms
[debug] [Loading] Scanning directory D:\00 Project\00 My Project\IdeaProjects\Scala-IDX-Stock-Analysis\project
[debug]             Load.loadUnit: mkEval took 12.0964ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\00 Project\00 My Project\IdeaProjects\Scala-IDX-Stock-Analysis\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.7525 ms
[info] loading settings for project scala-idx-stock-analysis-build from idea.sbt ...
[debug]               Load.resolveProject(scala-idx-stock-analysis-build) took 10.082ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala-idx-stock-analysis-build, base: D:\00 Project\00 My Project\IdeaProjects\Scala-IDX-Stock-Analysis\project, plugins: List(<none>))) took 13.5276ms
[debug] [Loading] Done in D:\00 Project\00 My Project\IdeaProjects\Scala-IDX-Stock-Analysis\project, returning: (scala-idx-stock-analysis-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3438.245ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.1343ms
[debug]         Load.loadUnit(file:/D:/00%20Project/00%20My%20Project/IdeaProjects/Scala-IDX-Stock-Analysis/project/, ...) took 3486.6786ms
[debug]       Load.apply: load took 3488.3687ms
[debug]       Load.apply: resolveProjects took 0.1223ms
[debug]       Load.apply: finalTransforms took 14.9971ms
[debug]       Load.apply: config.delegates took 0.6434ms
[debug]       Load.apply: Def.make(settings)... took 93.5848ms
[debug]       Load.apply: structureIndex took 32.5306ms
[debug]       Load.apply: mkStreams took 0.0052ms
[info] loading project definition from D:\00 Project\00 My Project\IdeaProjects\Scala-IDX-Stock-Analysis\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5685.0811ms
[debug]     Load.loadUnit: defsScala took 0.002ms
[debug] [Loading] Scanning directory D:\00 Project\00 My Project\IdeaProjects\Scala-IDX-Stock-Analysis
[debug]       Load.loadUnit: mkEval took 0.3017ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.9626 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 40.6525ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: D:\00 Project\00 My Project\IdeaProjects\Scala-IDX-Stock-Analysis, plugins: List(<none>))) took 45.5084ms
[debug] [Loading] Done in D:\00 Project\00 My Project\IdeaProjects\Scala-IDX-Stock-Analysis, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 3047.6602ms
[debug]     Load.loadUnit: cleanEvalClasses took 31.9416ms
[debug]   Load.loadUnit(file:/D:/00%20Project/00%20My%20Project/IdeaProjects/Scala-IDX-Stock-Analysis/, ...) took 8765.3283ms
[debug] Load.apply: load took 8766.9043ms
[debug] Load.apply: resolveProjects took 0.0987ms
[debug] Load.apply: finalTransforms took 30.2076ms
[debug] Load.apply: config.delegates took 0.32ms
[debug] Load.apply: Def.make(settings)... took 108.751ms
[debug] Load.apply: structureIndex took 26.7465ms
[debug] Load.apply: mkStreams took 0.004ms
[info] set current project to Scala-IDX-Stock-Analysis (in build file:/D:/00%20Project/00%20My%20Project/IdeaProjects/Scala-IDX-Stock-Analysis/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57665 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57665, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Scala-IDX-Stock-Analysis (in build file:/D:/00%20Project/00%20My%20Project/IdeaProjects/Scala-IDX-Stock-Analysis/)
[debug] > Exec(idea-shell, None, None)
