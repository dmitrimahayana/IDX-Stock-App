[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ASUS\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ASUS\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.1 (Oracle Corporation Java 11.0.17)
[debug]       Load.loadUnit: plugins took 95.1149ms
[debug]       Load.loadUnit: defsScala took 0.3682ms
[debug] [Loading] Scanning directory C:\Users\ASUS\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ASUS\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.061 ms
[debug]           Load.resolveProject(global-plugins) took 50.8066ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\ASUS\.sbt\1.0\plugins, plugins: List(<none>))) took 96.2557ms
[debug] [Loading] Done in C:\Users\ASUS\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 121.711ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2448ms
[debug]     Load.loadUnit(file:/C:/Users/ASUS/.sbt/1.0/plugins/, ...) took 226.4023ms
[debug]   Load.apply: load took 399.7254ms
[debug]   Load.apply: resolveProjects took 5.8659ms
[debug]   Load.apply: finalTransforms took 72.3621ms
[debug]   Load.apply: config.delegates took 12.0433ms
[debug]   Load.apply: Def.make(settings)... took 427.808ms
[debug]   Load.apply: structureIndex took 84.0276ms
[debug]   Load.apply: mkStreams took 1.4095ms
[info] loading global plugins from C:\Users\ASUS\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2420.5567ms
[debug]           Load.loadUnit: plugins took 33.5123ms
[debug]           Load.loadUnit: defsScala took 0.0051ms
[debug] [Loading] Scanning directory D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL\project
[debug]             Load.loadUnit: mkEval took 8.803ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.1442 ms
[info] loading settings for project scala_amazon_etl-build from idea1.sbt ...
[debug]               Load.resolveProject(scala_amazon_etl-build) took 2.6746ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala_amazon_etl-build, base: D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL\project, plugins: List(<none>))) took 5.3297ms
[debug] [Loading] Done in D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL\project, returning: (scala_amazon_etl-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 155.394ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.742ms
[debug]         Load.loadUnit(file:/D:/00%20Project/00%20My%20Project/IdeaProjects/Scala_Amazon_ETL/project/, ...) took 193.8605ms
[debug]       Load.apply: load took 195.2354ms
[debug]       Load.apply: resolveProjects took 0.2033ms
[debug]       Load.apply: finalTransforms took 8.5846ms
[debug]       Load.apply: config.delegates took 0.5707ms
[debug]       Load.apply: Def.make(settings)... took 70.2664ms
[debug]       Load.apply: structureIndex took 23.1743ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 590.5157ms
[debug]     Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL
[debug]       Load.loadUnit: mkEval took 0.1735ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.7741 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 28.587ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL, plugins: List(<none>))) took 32.8261ms
[debug] [Loading] Done in D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2086.7089ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.7441ms
[debug]   Load.loadUnit(file:/D:/00%20Project/00%20My%20Project/IdeaProjects/Scala_Amazon_ETL/, ...) took 2688.6704ms
[debug] Load.apply: load took 2690.1394ms
[debug] Load.apply: resolveProjects took 0.1225ms
[debug] Load.apply: finalTransforms took 22.9259ms
[debug] Load.apply: config.delegates took 0.2973ms
[debug] Load.apply: Def.make(settings)... took 64.7639ms
[debug] Load.apply: structureIndex took 20.8812ms
[debug] Load.apply: mkStreams took 0.0019ms
[info] set current project to Scala_Amazon_ETL (in build file:/D:/00%20Project/00%20My%20Project/IdeaProjects/Scala_Amazon_ETL/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53177 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53177, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Scala_Amazon_ETL (in build file:/D:/00%20Project/00%20My%20Project/IdeaProjects/Scala_Amazon_ETL/)
[debug] > Exec(idea-shell, None, None)
