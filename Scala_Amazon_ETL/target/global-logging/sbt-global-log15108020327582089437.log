[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ASUS\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ASUS\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.1 (Oracle Corporation Java 11.0.17)
[debug]       Load.loadUnit: plugins took 142.1167ms
[debug]       Load.loadUnit: defsScala took 0.4216ms
[debug] [Loading] Scanning directory C:\Users\ASUS\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ASUS\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 16.9974 ms
[debug]           Load.resolveProject(global-plugins) took 50.2914ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\ASUS\.sbt\1.0\plugins, plugins: List(<none>))) took 102.5649ms
[debug] [Loading] Done in C:\Users\ASUS\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 131.1845ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2212ms
[debug]     Load.loadUnit(file:/C:/Users/ASUS/.sbt/1.0/plugins/, ...) took 285.6319ms
[debug]   Load.apply: load took 491.9763ms
[debug]   Load.apply: resolveProjects took 6.32ms
[debug]   Load.apply: finalTransforms took 57.6195ms
[debug]   Load.apply: config.delegates took 7.0595ms
[debug]   Load.apply: Def.make(settings)... took 418.2018ms
[debug]   Load.apply: structureIndex took 92.9697ms
[debug]   Load.apply: mkStreams took 1.6719ms
[info] loading global plugins from C:\Users\ASUS\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2820.9905ms
[debug]           Load.loadUnit: plugins took 36.3994ms
[debug]           Load.loadUnit: defsScala took 0.0058ms
[debug] [Loading] Scanning directory D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL\project
[debug]             Load.loadUnit: mkEval took 13.0091ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.8512 ms
[info] loading settings for project scala_amazon_etl-build from idea.sbt ...
[debug]               Load.resolveProject(scala_amazon_etl-build) took 4.0019ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala_amazon_etl-build, base: D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL\project, plugins: List(<none>))) took 8.7104ms
[debug] [Loading] Done in D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL\project, returning: (scala_amazon_etl-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 178.5736ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.3355ms
[debug]         Load.loadUnit(file:/D:/00%20Project/00%20My%20Project/IdeaProjects/Scala_Amazon_ETL/project/, ...) took 221.5003ms
[debug]       Load.apply: load took 223.4408ms
[debug]       Load.apply: resolveProjects took 0.1777ms
[debug]       Load.apply: finalTransforms took 12.489ms
[debug]       Load.apply: config.delegates took 0.5038ms
[debug]       Load.apply: Def.make(settings)... took 86.386ms
[debug]       Load.apply: structureIndex took 31.4469ms
[debug]       Load.apply: mkStreams took 0.0022ms
[info] loading project definition from D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 702.1661ms
[debug]     Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL
[debug]       Load.loadUnit: mkEval took 0.1805ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.0272 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 38.1055ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL, plugins: List(<none>))) took 42.152ms
[debug] [Loading] Done in D:\00 Project\00 My Project\IdeaProjects\Scala_Amazon_ETL, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2619.259ms
[debug]     Load.loadUnit: cleanEvalClasses took 15.0598ms
[debug]   Load.loadUnit(file:/D:/00%20Project/00%20My%20Project/IdeaProjects/Scala_Amazon_ETL/, ...) took 3337.2025ms
[debug] Load.apply: load took 3339.1144ms
[debug] Load.apply: resolveProjects took 0.0991ms
[debug] Load.apply: finalTransforms took 38.2668ms
[debug] Load.apply: config.delegates took 0.3184ms
[debug] Load.apply: Def.make(settings)... took 84.224ms
[debug] Load.apply: structureIndex took 27.905ms
[debug] Load.apply: mkStreams took 0.0024ms
[info] set current project to Scala_Amazon_ETL (in build file:/D:/00%20Project/00%20My%20Project/IdeaProjects/Scala_Amazon_ETL/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50093 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50093, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Scala_Amazon_ETL (in build file:/D:/00%20Project/00%20My%20Project/IdeaProjects/Scala_Amazon_ETL/)
[debug] > Exec(idea-shell, None, None)
